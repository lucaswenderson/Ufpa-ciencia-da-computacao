#include <iostream>
#include <stdlib.h>
#include <time.h> //clock(), CLOCKS_PER_SEC e clock_t
using namespace std;

typedef int tDado;

tDado vet_selection[200000];
tDado vet_quick[200000];

/*

tarefa 1)  completar a função quicksort abaixo

Já está sendo realizado o processo separação dos elementos
- foi escolhodo com pivo o elemento do meio
- os menores que o pivô já se encontram entre esq e j
- os maiores que o pivô já se encontram entre i e dir

Chamar a função recursiva para ordenar essas partições
Qual a condição de parada? ( momento em que já não se deve chamar a recursividade para as
partições)


2) Desenvolver a função selecao recursivamente.


3) Variar o valor de n (elementos do vetor) e observar o tempo decorrido para ordenação com
quicksort e seleção. Anotar os valores em milissegundos e avaliar o que acontece com  crescimento do vetor.
Informe os valores observados ao aumentar n (para os dois algoritmos) e explique esses dados.

*/

void quicksort (tDado v[],int esq, int dir) {
	int i,j;
	tDado pivo;

	i = esq; j = dir;
	pivo = v[(esq+dir) / 2];     // pivô será o elemento do meio
   	// separar em duas partições: menores a esquerda e maiores a direita do pivô
   	while (i <= j) {
      	while(v[i] < pivo) i++;
      	while(v[j] > pivo) j--;
      	if (i <= j) {
        	tDado aux = v[i];
         	v[i] = v[j];
         	v[j] = aux;
         	i++;
         	j--;
      	}
    }

  	//  ordenar as partições
	//  a condição de parada é o momento em que o vetor tiver apenas um elemento
	//  ou seja, quando esq == dir
	if (esq < dir) {
		// ordena os elementos menores que o pivô, de v[esq] até v[j]
		quicksort(v, esq, j);
		// ordena os elementos maiores que o pivô, de v[i] até v[dir]
	   	quicksort(v, i, dir);
   	}
}

// desenvolver recursivamente - esq e dir delimitam a parte a ser ordenada
void selecao(tDado v[],int esq, int dir) {

	// encontra o index do elemento mínimo
	int ind = esq;
	tDado min = v[ind];
	for (int i = esq; i <= dir; i++) {
		if (v[i] < min) {
			min = v[i];
			ind = i;
		}
	}

	// troca o elemento mais a esquerda do subvetor com o elemento mínimo
	int aux = v[esq];
	v[esq] = v[ind];
	v[ind] = aux;

	// para quando o subvetor não ordenado não tiver mais elementos
	if (esq+1 < dir) {
		selecao(v, esq+1, dir);
	}
}

// função para medir tempo de execução de uma função qualquer, dados seus argumentos
double medir_tempo(void (*algoritmo)(tDado[], int, int), tDado v[], int esq, int dir) {
	clock_t t1, t2;

	t1 = clock();
	algoritmo(v, esq, dir);
	t2 = clock();

	return ((double) t2-t1) / (CLOCKS_PER_SEC / 1000);  //conversão para milissegundos
}

int main () {
	int n; // tamanho lógico (número de casas ocupadas) do vetor
	char continua;
	double tempo_selection, tempo_quick; //variáveis para calcular o tempo decorrido na execução

	do {
    	cout <<  "Informe o número de elementos: ";
    	cin >> n;

		// gerar n números aleatórios entre 1 e n
		for (int i=0; i<n; i++) {
			int x = rand() % n + 1;
    		vet_selection[i] = x;
			vet_quick[i] = x;
		}

		//exibir o vetor no estado inicial
		cout << "Estado inicial: \n";
		for (int i=0; i<n; i++)
			cout<< vet_selection[i] << ' ';
		cout << endl;

		// obter os tempos de execução de cada algoritmo
		tempo_selection = medir_tempo(quicksort, vet_selection, 0, n-1);
		tempo_quick = medir_tempo(quicksort, vet_quick, 0, n-1);

		//exibir os vetores ordenados
		cout << "Vetor ordenado por selectionsort: \n";
		for (int i=0; i<n; i++)
			cout<< vet_selection[i] << ' ';
		cout<< endl;
		cout << "Vetor ordenado por quicksort: \n";
		for (int i=0; i<n; i++)
			cout<< vet_quick[i] << ' ';
		cout<< endl;

		// informar tempo decorrido em milissegundos
		cout << "Tempo de execucao selectionsort: " << tempo_selection << "ms." << endl;
		cout << "Tempo de execucao quicksort: " << tempo_quick << "ms." << endl;

		cout <<  "Quer continuar? (S/N) ";
		cin >> continua;


	} while (continua == 'S' || continua == 's');
}
